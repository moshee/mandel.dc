#!/usr/bin/env dc -f

# Take a line of terminal input. Should be three integers: max iterations
# (0..255), height, and width, separated by spaces.
?

# Print out the PGM format magic
[P5]P

# The numbers were entered backwards because we use f (show stack) to print
# the rest of the PGM header, separated by whitespace (f uses newlines).
# Notice that there is no space between the P5 and the first number, the width.
# The space there is not strictly necessary. It would be nice to have it, but
# there's no way to print a string with a following newline and then pop it.
# It needs to be popped because...
f

# ...we're storing the stack values into registers here.
# w = width, h = height, m = max iters
sw sh sm

9k # set to the max precision we can get with a single digit

# A macro to break a loop (used only once but the compare-and-execute
# instruction only takes macros)
[q]sQ

# Begin looping through h rows of w pixels wide each.
# All of these loops are analogous to do { ... } while (...) loops. It's three
# characters shorter for each loop that way. Just have to keep the "at least
# one iteration" behavior in mind.
# q = row index
0sq
[
    # Store the x pixel index on the stack instead of a register, because we
    # can keep it local. Won't work for the row index.
    0
    [
        # Dupe the x index for the next operation and calculate the scaled
        # Mandelbrot plot point on the X axis, between -3 and 1
        # a = x0
        dlw/  4* 3-   sa
        
        # Calculate the scaled Y axis point, between -1.5 and 1.5
        # b = y0
        lqlh/ 3* 1.5- sb
        
        # Begin the escape time iteration. Store iteration i on the stack.
        # x = 0, y = 0, stack = 0
        0ddsxsy
        [
            lxd* lyd*+ 4!>Q     # Break macro I if x^2 + y^2 > 4
            lxdd* lyd*- la+ sx  # x = x^2 - y^2 + x0; old x on stack
            2ly** lb+ sy        # y = 2xy + y0
            1+dlm>I             # i++; loop I again if i < m
        ]dsIx                   # Assign and execute macro I: escape time loop
        
        # Now we are done iterating. Print out the binary representation of i.
        # Subtract 1 here because i has already had 1 added to it; the values
        # of i here could be in 1..256 (0x01..0x100). We want 0x00..0xff.
        1- P
        
        # p++; continue along this X-row of pixels if x pixel index < w.
        1+dlw>X
    ]dsXx # Assign and execute macro X: row pixels loop
    
    # By now we are done with one row of pixels.
    # Clear the x pixel index so that the stack doesn't just grow and grow.
    # Using c to clear the entire stack is safe here because nothing else needs
    # to be stored on the stack at this point.
    c
    
    # q++; continue onto the next row if q < h.
    lq1+dsqlh>Y
]dsYx # Assign and execute macro Y: image rows loop
